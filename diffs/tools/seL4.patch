diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/cmake-tool/helpers/application_settings.cmake seL4/cmake-tool/helpers/application_settings.cmake
--- ../backup/tools/seL4/cmake-tool/helpers/application_settings.cmake	2023-03-21 20:04:04.237367336 +0800
+++ seL4/cmake-tool/helpers/application_settings.cmake	2023-04-11 19:12:08.742825449 +0800
@@ -10,7 +10,7 @@
 include_guard(GLOBAL)
 
 function(ApplyData61ElfLoaderSettings kernel_platform kernel_sel4_arch)
-    set(binary_list "tx1;hikey;odroidc2;odroidc4;imx8mq-evk;imx8mm-evk;hifive;tqma8xqp1gb")
+    set(binary_list "tx1;hikey;odroidc2;odroidc4;imx8mq-evk;imx8mm-evk;hifive;tqma8xqp1gb;bcm2711")
     set(efi_list "tk1;rockpro64;quartz64")
     set(uimage_list "tx2;am335x")
     if(
@@ -24,8 +24,8 @@
     elseif(${kernel_platform} STREQUAL "bcm2837" AND ${kernel_sel4_arch} STREQUAL "aarch64")
         set(ElfloaderImage "binary" CACHE STRING "" FORCE)
         #rpi4
-    elseif(${kernel_platform} STREQUAL "bcm2711" AND ${kernel_sel4_arch} STREQUAL "aarch64")
-        set(ElfloaderImage "efi" CACHE STRING "" FORCE)
+    # elseif(${kernel_platform} STREQUAL "bcm2711" AND ${kernel_sel4_arch} STREQUAL "aarch64")
+    #     set(ElfloaderImage "efi" CACHE STRING "" FORCE)
     elseif(${kernel_platform} IN_LIST binary_list)
         set(ElfloaderImage "binary" CACHE STRING "" FORCE)
     else()
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/include/plat/bcm2711/platform.h seL4/elfloader-tool/include/plat/bcm2711/platform.h
--- ../backup/tools/seL4/elfloader-tool/include/plat/bcm2711/platform.h	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/include/plat/bcm2711/platform.h	2023-04-11 19:12:14.066695633 +0800
@@ -0,0 +1,18 @@
+/*
+ * Copyright 2020, Arm Ltd
+ *
+ * Copyright 2017, Data61
+ * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
+ * ABN 41 687 119 230.
+ *
+ * This software may be distributed and modified according to the terms of
+ * the GNU General Public License version 2. Note that NO WARRANTY is provided.
+ * See "LICENSE_GPLv2.txt" for details.
+ *
+ * @TAG(DATA61_GPL)
+ */
+
+#pragma once
+
+#define MU_PADDR    0xfe201000
+#define UART_PPTR   (MU_PADDR)
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/smp.c seL4/elfloader-tool/src/plat/bcm2711/smp.c
--- ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/smp.c	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/src/plat/bcm2711/smp.c	2023-04-11 19:12:14.066695633 +0800
@@ -0,0 +1,57 @@
+/*
+ * Copyright 2020, Arm Ltd
+ *
+ * Copyright 2017, Data61
+ * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
+ * ABN 41 687 119 230.
+ *
+ * This software may be distributed and modified according to the terms of
+ * the GNU General Public License version 2. Note that NO WARRANTY is provided.
+ * See "LICENSE_GPLv2.txt" for details.
+ *
+ * @TAG(DATA61_GPL)
+ */
+
+#include <autoconf.h>
+#include <elfloader/gen_config.h>
+#include <types.h>
+
+#if CONFIG_MAX_NUM_NODES > 1
+#include <types.h>
+#include <elfloader.h>
+#include <armv/machine.h>
+#include <armv/smp.h>
+#include <printf.h>
+#include <abort.h>
+
+#define MAX_CORES 4
+
+extern void core_entry_head(unsigned long stack);
+
+unsigned long core_stack;
+
+uint64_t spin_table[4] = { 0xd8, 0xe0, 0xe8, 0xf0 };
+
+void init_cpus(void)
+{
+    int nodes = CONFIG_MAX_NUM_NODES;
+    if (nodes > MAX_CORES) {
+        printf("CONFIG_MAX_NUM_NODES %d is greater than max number cores %d, will abort\n",
+               CONFIG_MAX_NUM_NODES, MAX_CORES);
+        abort();
+    }
+    for (int i = 1; i < nodes; i++) {
+        /* all cores read the stack pointer from the same place */
+        core_stack = (unsigned long) &core_stacks[i][0];
+        *((volatile unsigned long *)(spin_table[i])) = (unsigned long)core_entry_head;
+        dsb();
+        asm volatile("sev");
+        while (!is_core_up(i));
+        printf("Core %d is up with logic ID %d\n", i, i);
+    }
+
+    /* set the logic id for the booting core */
+    MSR("tpidr_el1", 0);
+}
+
+#endif /* CONFIG_MAX_NUM_NODES > 1 */
\ No newline at end of file
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/smp_head.S seL4/elfloader-tool/src/plat/bcm2711/smp_head.S
--- ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/smp_head.S	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/src/plat/bcm2711/smp_head.S	2023-04-11 19:12:14.066695633 +0800
@@ -0,0 +1,34 @@
+/*
+ * Copyright 2020, Arm Ltd
+ *
+ * Copyright 2017, Data61
+ * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
+ * ABN 41 687 119 230.
+ *
+ * This software may be distributed and modified according to the terms of
+ * the GNU General Public License version 2. Note that NO WARRANTY is provided.
+ * See "LICENSE_GPLv2.txt" for details.
+ *
+ * @TAG(DATA61_GPL)
+ */
+
+#include <autoconf.h>
+#include <elfloader/gen_config.h>
+#include <assembler.h>
+#include <armv/assembler.h>
+
+#if CONFIG_MAX_NUM_NODES > 1
+
+.text
+
+.extern core_entry
+.extern core_stack
+BEGIN_FUNC(core_entry_head)
+    ldr x0, =core_stack
+    ldr x3, [x0]
+    mov x0, x3
+    mov sp, x3
+    b   core_entry
+END_FUNC(core_entry_head)
+
+#endif
\ No newline at end of file
diff -Nur '--exclude=.git' '--exclude=.github' '--exclude=*.pyc' '--exclude-from=seL4/.gitignore' ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/sys_fputc.c seL4/elfloader-tool/src/plat/bcm2711/sys_fputc.c
--- ../backup/tools/seL4/elfloader-tool/src/plat/bcm2711/sys_fputc.c	1970-01-01 08:00:00.000000000 +0800
+++ seL4/elfloader-tool/src/plat/bcm2711/sys_fputc.c	2023-04-11 19:12:14.066695633 +0800
@@ -0,0 +1,70 @@
+/*
+ * Copyright 2020, Arm Ltd
+ *
+ * Copyright 2017, Data61
+ * Commonwealth Scientific and Industrial Research Organisation (CSIRO)
+ * ABN 41 687 119 230.
+ *
+ * This software may be distributed and modified according to the terms of
+ * the GNU General Public License version 2. Note that NO WARRANTY is provided.
+ * See "LICENSE_GPLv2.txt" for details.
+ *
+ * @TAG(DATA61_GPL)
+ */
+
+/*
+ * Platform-specific putchar implementation.
+ */
+
+#include <printf.h>
+#include <types.h>
+#include <platform.h>
+#include <elfloader.h>
+
+/* When DLAB=1, MU_IO is a baud rate register.
+ * Otherwise, write to TX, read to RX */
+#define MU_IO       0x40
+/* When DLAB=1, MU_IIR is a baud rate register.
+ * Otherwise IRQ enable */
+#define MU_IIR      0x44
+#define MU_IER      0x48
+#define MU_LCR      0x4C
+#define MU_MCR      0x50
+#define MU_LSR      0x54
+#define MU_MSR      0x58
+#define MU_SCRATCH  0x5C
+#define MU_CNTL     0x60
+
+/* This bit is set if the transmit FIFO can accept at least one byte.*/
+#define MU_LSR_TXEMPTY  BIT(5)
+/* This bit is set if the transmit FIFO is empty and the
+ * transmitter is idle. (Finished shifting out the last bit). */
+#define MU_LSR_TXIDLE   BIT(6)
+
+#define MU_LCR_DLAB     BIT(7)
+#define MU_LCR_BREAK    BIT(6)
+#define MU_LCR_DATASIZE BIT(0)
+/*
+ * Place a character to the given stream, which we always assume to be
+ * 'stdout'.
+ */
+extern int
+__fputc(int c, FILE *stream);
+
+#define UART_REG(x) ((volatile uint32_t *)(UART_PPTR + (x)))
+
+int __fputc(int c, FILE *stream)
+{
+    /* Wait until UART ready for the next character. */
+    while (!(*UART_REG(MU_LSR) & MU_LSR_TXIDLE));
+
+    /* Put in the register to be sent*/
+    *UART_REG(MU_IO) = (c & 0xff);
+
+    /* Send '\r' after every '\n'. */
+    if (c == '\n') {
+        (void)__fputc('\r', stream);
+    }
+
+    return 0;
+}
\ No newline at end of file
